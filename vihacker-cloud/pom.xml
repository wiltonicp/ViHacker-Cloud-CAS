<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cc.vihackerframework</groupId>
    <artifactId>vihacker-cloud</artifactId>
    <version>1.0.3</version>
    <packaging>pom</packaging>

    <name>vihacker-cloud</name>
    <url>https://github.com/wiltonicp/vihacker-cloud</url>
    <description>ViHacker-Cloud：Spring Cloud，Spring Security OAuth2 微服务统一认证中心</description>

    <modules>
        <module>../vihacker-core</module>
        <module>../vihacker-uaa</module>
        <module>../vihacker-platform</module>
        <module>../vihacker-thirdparty</module>
        <module>../vihacker-pay</module>
    </modules>

    <licenses>
        <license>
            <name>The ApacheSoftware License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Ranger</name>
            <email>wilton.icp@gmail.com</email>
            <url>https://blog.vihackerframework.cc</url>
        </developer>
    </developers>

    <scm>
        <tag>master</tag>
        <connection>scm:git:git@github.com:wiltonicp/vihacker-cloud.git</connection>
        <developerConnection>scm:git:git@github.com:wiltonicp/vihacker-cloud.git</developerConnection>
        <url>https://github.com/wiltonicp/vihacker-cloud</url>
    </scm>

    <properties>
        <vihacker.core.version>1.0.3</vihacker.core.version>
        <java.version>11</java.version>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.plugin.version>3.8.1</maven.plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring.boot.version>2.5.1</spring.boot.version>

        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
        <maven-source-plugin.version>3.0.1</maven-source-plugin.version>
        <maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
        <maven-assembly-plugin.version>3.1.0</maven-assembly-plugin.version>
        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
        <maven-dockerfile-plugin.version>1.4.10</maven-dockerfile-plugin.version>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <docker.maven.plugin.version>1.2.2</docker.maven.plugin.version>
        <docker.serverId>docker-aliyun</docker.serverId>
        <docker.registry>registry.cn-shanghai.aliyuncs.com/vihacker</docker.registry>
        <docker.registry.name>vihacker/tools</docker.registry.name>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>cc.vihackerframework</groupId>
                <artifactId>vihacker-dependencies-starter</artifactId>
                <version>${vihacker.core.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <distributionManagement>
        <repository>
            <id>nexus-releases</id> <!-- nexus认证id -->
            <url>http://rep.wiltonic.cn:8331/repository/maven-releases</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id> <!-- nexus认证id -->
            <url>http://rep.wiltonic.cn:8331/repository/maven-snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring.boot.version}</version>
                    <configuration>
                        <fork>true</fork>
                        <finalName>${project.build.finalName}</finalName>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker.maven.plugin.version}</version>
                    <!--将插件绑定在某个phase执行 只需执行mvn package ，就会自动执行mvn docker:build -->
                    <executions>
                        <!--执行 mvn package 时 自动 执行 mvn docker:build-->
                        <execution>
                            <id>build-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- 覆盖相同标签镜像 -->
                        <forceTags>true</forceTags>
                        <!-- install阶段上传镜像 -->
                        <pushImage>true</pushImage>
                        <serverId>${docker.serverId}</serverId>
                        <!-- 远程仓库地址 -->
                        <registryUrl>${docker.registry}</registryUrl>
                        <dockerDirectory>src/main/docker</dockerDirectory>
                        <imageName>${docker.registry}/${project.artifactId}:${project.version}</imageName>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                    <compilerArgs>
                        <arg>-parameters</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>local</id>
            <properties>
                <!--当前环境-->
                <spring.active>local</spring.active>
                <config.server-addr>127.0.0.1:8848</config.server-addr>
                <config.namespace>07230e1a-12e6-4209-838f-fa60cf013e7e</config.namespace>
                <config.group>TEST_GROUP</config.group>
                <discovery.server-addr>127.0.0.1:8848</discovery.server-addr>
                <sentinel.port>8719</sentinel.port>
                <sentinel.dashboard>127.0.0.1:8088</sentinel.dashboard>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>dev</id>
            <properties>
                <spring.active>dev</spring.active>
                <config.server-addr>127.0.0.1:8848</config.server-addr>
                <config.namespace>07230e1a-12e6-4209-838f-fa60cf013e7e</config.namespace>
                <config.group>DEFAULT_GROUP</config.group>
                <discovery.server-addr>127.0.0.1:8848</discovery.server-addr>
                <sentinel.port>8719</sentinel.port>
                <sentinel.dashboard>127.0.0.1:8080</sentinel.dashboard>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <spring.active>test</spring.active>
                <config.server-addr>172.26.85.32:8848</config.server-addr>
                <config.namespace>07230e1a-12e6-4209-838f-fa60cf013e7e</config.namespace>
                <config.group>DEFAULT_GROUP</config.group>
                <discovery.server-addr>172.26.85.32:8848</discovery.server-addr>
                <sentinel.port>8719</sentinel.port>
                <sentinel.dashboard>localhost:8080</sentinel.dashboard>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <spring.active>prod</spring.active>
                <config.server-addr>172.26.85.32:8848</config.server-addr>
                <config.namespace>07230e1a-12e6-4209-838f-fa60cf013e7e</config.namespace>
                <config.group>DEFAULT_GROUP</config.group>
                <discovery.server-addr>172.26.85.32:8848</discovery.server-addr>
                <sentinel.port>8719</sentinel.port>
                <sentinel.dashboard>localhost:8080</sentinel.dashboard>
            </properties>
        </profile>
        <profile>
            <id>docker</id>
            <properties>
                <spring.active>docker</spring.active>
                <config.server-addr>172.30.0.48:8848</config.server-addr>
                <config.namespace>07230e1a-12e6-4209-838f-fa60cf013e7e</config.namespace>
                <config.group>DEFAULT_GROUP</config.group>
                <discovery.server-addr>172.30.0.48:8848</discovery.server-addr>
                <sentinel.port>8719</sentinel.port>
                <sentinel.dashboard>172.30.0.80:8088</sentinel.dashboard>
            </properties>
            <!--            <activation>-->
            <!--                <activeByDefault>true</activeByDefault>-->
            <!--            </activation>-->
        </profile>
    </profiles>

</project>